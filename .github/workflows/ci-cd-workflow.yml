name: 'CI/CD Pipeline'

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['main', 'develop', 'staging']

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # QUALITY ASSURANCE JOBS
  # ==========================================
  
  lint:
    name: 'ESLint Check'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint . --ext .ts,.tsx --format=json --output-file=eslint-report.json || true

      - name: Show ESLint results
        run: |
          if [ -f eslint-report.json ]; then
            echo "ESLint Report:"
            cat eslint-report.json | jq -r '.[] | "\(.filePath): \(.messages | length) issues"' || echo "ESLint completed"
            # Check if there are any errors (not warnings)
            ERRORS=$(cat eslint-report.json | jq '[.[].messages[] | select(.severity == 2)] | length')
            if [ "$ERRORS" -gt 0 ]; then
              echo "❌ Found $ERRORS ESLint errors"
              exit 1
            else
              echo "✅ No ESLint errors found"
            fi
          fi

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json

  type-check:
    name: 'TypeScript Type Check'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: tsc --noEmit

  build-test:
    name: 'Backend Build Test'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build directory 'dist' was not created"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Main entry point 'dist/index.js' was not created"
            exit 1
          fi
          echo "✅ Build artifacts verified"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  # ==========================================
  # SECURITY & DEPENDENCY CHECKS
  # ==========================================

  security-audit:
    name: 'Security & Dependency Audit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm security audit
        run: |
          npm audit --audit-level=high --json > security-audit.json || true
          VULNERABILITIES=$(cat security-audit.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "⚠️  Found $VULNERABILITIES high/critical vulnerabilities"
            npm audit --audit-level=high
            echo "Please review and fix security vulnerabilities before deployment"
          else
            echo "✅ No high/critical security vulnerabilities found"
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: security-audit.json


  # ==========================================
  # CLEANUP JOB
  # ==========================================

  cleanup:
    name: 'Cleanup Artifacts'
    runs-on: ubuntu-latest
    needs: [lint, type-check, build-test, security-audit]
    if: always()
    
    steps:
      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            build-artifacts
            eslint-report
            security-audit-report
          failOnError: false

# ==========================================
# WORKFLOW SUMMARY
# ==========================================

# This workflow provides quality assurance checks for all branches:
# 1. ✅ ESLint code quality checks with error reporting
# 2. ✅ TypeScript type checking (tsc --noEmit)  
# 3. ✅ Backend build testing (tsc compilation)
# 4. ✅ Security and dependency vulnerability scanning
# 5. ✅ Artifact management and cleanup

# Branch Strategy:
# - All branches → Quality checks (lint, typecheck, build, security audit)
# - Railway handles automatic deployment for staging/production branches
# - These 4 quality checks will be enforced via GitHub branch protection rules

# Deployment Strategy:
# - Railway automatically deploys when code is pushed to staging/production branches
# - GitHub branch protection ensures quality checks pass before merging to staging/production
# - No CI/CD deployment logic needed - Railway handles the deployment process