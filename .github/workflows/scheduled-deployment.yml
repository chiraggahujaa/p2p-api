name: Daily Production Deploy

on:
  schedule:
    # Run every day at 9:00 PM UTC (adjust timezone as needed)
    - cron: '0 21 * * *'
  workflow_dispatch: # Allow manual triggering
    inputs:
      force_deploy:
        description: 'Force deployment even if main is behind production'
        required: false
        default: false
        type: boolean

# Add these permissions at the workflow level
permissions:
  contents: write        # To push to branches
  pull-requests: write   # To create/update PRs if needed
  actions: read         # To read workflow status
  checks: read          # To read status checks

env:
  NODE_VERSION: '20'

jobs:
  # ==========================================
  # DEPLOYMENT TO PRODUCTION
  # ==========================================
  
  deploy-to-production:
    name: 'Deploy Main to Production'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Check if deployment is needed
        id: check
        run: |
          # Get current branch info
          MAIN_COMMIT=$(git rev-parse origin/main)
          PRODUCTION_COMMIT=$(git rev-parse origin/production)
          
          echo "main-commit=$MAIN_COMMIT" >> $GITHUB_OUTPUT
          echo "production-commit=$PRODUCTION_COMMIT" >> $GITHUB_OUTPUT
          
          # Check if main is ahead of production
          if git merge-base --is-ancestor origin/production origin/main; then
            if [ "$MAIN_COMMIT" = "$PRODUCTION_COMMIT" ]; then
              echo "‚ÑπÔ∏è  Main and production are at the same commit. No deployment needed."
              echo "should-deploy=false" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ Main is ahead of production. Deployment needed."
              echo "should-deploy=true" >> $GITHUB_OUTPUT
            fi
          else
            if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
              echo "‚ö†Ô∏è  Production is ahead of main, but force deployment is enabled."
              echo "should-deploy=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Production is ahead of main. Skipping deployment to prevent rollback."
              echo "should-deploy=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Merge main into production
        id: merge
        if: steps.check.outputs.should-deploy == 'true'
        run: |
          echo "üöÄ Starting deployment from main to production..."
          
          # Switch to production branch
          git checkout production
          git pull origin production
          
          # Try fast-forward merge first (preferred method)
          if git merge origin/main --ff-only; then
            echo "‚úÖ Fast-forward merge successful"
          else
            echo "‚ö†Ô∏è Fast-forward merge not possible, using rebase strategy..."
            
            # Reset to main (this creates linear history)
            git reset --hard origin/main
            
            # Create a deployment commit
            git commit --allow-empty -m "ü§ñ Automated deployment: Update production to main"
            
            - Source: main (${{ steps.check.outputs.main-commit }})
            - Target: production (${{ steps.check.outputs.production-commit }})
            - Triggered by: ${{ github.event_name }}
            - Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            This deployment was automatically triggered by the scheduled workflow."
            
            echo "‚úÖ Production branch updated to match main with deployment commit"
          fi
          
          # Push to production branch
          git push origin production --force
          
          echo "‚úÖ Successfully merged main into production"
          echo "deployment-commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Verify deployment
        if: steps.check.outputs.should-deploy == 'true'
        run: |
          echo "üîç Verifying deployment..."
          
          # Wait a moment for Railway to detect the push
          sleep 10
          
          # Check if production branch was updated
          PRODUCTION_LATEST=$(git rev-parse origin/production)
          if [ "$PRODUCTION_LATEST" = "${{ steps.merge.outputs.deployment-commit }}" ]; then
            echo "‚úÖ Production branch successfully updated"
            echo "üöÄ Railway should now be deploying the new version"
          else
            echo "‚ùå Production branch update verification failed"
            exit 1
          fi

  # ==========================================
  # NOTIFICATIONS
  # ==========================================
  
  notify-success:
    name: 'Notify Deployment Success'
    runs-on: ubuntu-latest
    needs: deploy-to-production
    if: always() && needs.deploy-to-production.result == 'success'
    
    steps:
      - name: Success notification
        run: |
          echo "üéâ Scheduled deployment completed successfully!"
          echo "üìä Deployment Summary:"
          echo "  - Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - Status: ‚úÖ Success"
          echo ""
          echo "üöÄ Railway should now be deploying the new version to production."

  notify-skipped:
    name: 'Notify Deployment Skipped'
    runs-on: ubuntu-latest
    needs: deploy-to-production
    if: always() && needs.deploy-to-production.result == 'skipped'
    
    steps:
      - name: Skipped notification
        run: |
          echo "‚è≠Ô∏è  Scheduled deployment skipped"
          echo "üìä Deployment Summary:"
          echo "  - Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - Status: ‚è≠Ô∏è  Skipped (no new changes or production ahead)"
          echo ""
          echo "‚ÑπÔ∏è  No deployment was needed at this time."

  notify-failure:
    name: 'Notify Deployment Failure'
    runs-on: ubuntu-latest
    needs: deploy-to-production
    if: always() && needs.deploy-to-production.result == 'failure'
    
    steps:
      - name: Failure notification
        run: |
          echo "‚ùå Scheduled deployment failed!"
          echo "üìä Deployment Summary:"
          echo "  - Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - Status: ‚ùå Failed"
          echo ""
          echo "üîç Please check the workflow logs for details."
          echo "üí° You may need to resolve merge conflicts manually."

# ==========================================
# WORKFLOW SUMMARY
# ==========================================

# This workflow automatically deploys main branch to production every day at 9 PM UTC:
# 1. ‚úÖ Checks if main is ahead of production (prevents rollbacks)
# 2. ‚úÖ Safely merges main into production with conflict detection
# 3. ‚úÖ Verifies the deployment was successful
# 4. ‚úÖ Provides detailed notifications for success/failure/skip scenarios
# 5. ‚úÖ Supports manual triggering with force deployment option

# Schedule: Daily at 9:00 PM UTC (adjust cron expression for your timezone)
# Manual trigger: Available via GitHub Actions UI with force deployment option
# Safety features: Prevents rollbacks, detects conflicts
# Note: Quality checks are handled by your existing production push workflow
