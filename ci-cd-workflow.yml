name: 'CI/CD Pipeline'

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['main', 'develop']

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # QUALITY ASSURANCE JOBS
  # ==========================================
  
  lint:
    name: 'ESLint Check'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint . --ext .ts,.tsx --format=json --output-file=eslint-report.json || true

      - name: Show ESLint results
        run: |
          if [ -f eslint-report.json ]; then
            echo "ESLint Report:"
            cat eslint-report.json | jq -r '.[] | "\(.filePath): \(.messages | length) issues"' || echo "ESLint completed"
            # Check if there are any errors (not warnings)
            ERRORS=$(cat eslint-report.json | jq '[.[].messages[] | select(.severity == 2)] | length')
            if [ "$ERRORS" -gt 0 ]; then
              echo "❌ Found $ERRORS ESLint errors"
              exit 1
            else
              echo "✅ No ESLint errors found"
            fi
          fi

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json

  type-check:
    name: 'TypeScript Type Check'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: tsc --noEmit

  build-test:
    name: 'Backend Build Test'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build directory 'dist' was not created"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Main entry point 'dist/index.js' was not created"
            exit 1
          fi
          echo "✅ Build artifacts verified"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  # ==========================================
  # SECURITY & DEPENDENCY CHECKS
  # ==========================================

  security-audit:
    name: 'Security & Dependency Audit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm security audit
        run: |
          npm audit --audit-level=high --json > security-audit.json || true
          VULNERABILITIES=$(cat security-audit.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "⚠️  Found $VULNERABILITIES high/critical vulnerabilities"
            npm audit --audit-level=high
            echo "Please review and fix security vulnerabilities before deployment"
          else
            echo "✅ No high/critical security vulnerabilities found"
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: security-audit.json

  # ==========================================
  # DEPLOYMENT JOB
  # ==========================================

  deploy:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [lint, type-check, build-test, security-audit]
    if: github.ref == 'refs/heads/p2p/prod' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Install production dependencies
        run: npm ci --only=production

      - name: Prepare deployment package
        run: |
          mkdir -p deployment-package
          cp -r dist/ deployment-package/
          cp package*.json deployment-package/
          cp -r node_modules/ deployment-package/
          tar -czf deployment-package.tar.gz deployment-package/

      # Note: Replace this section with your actual deployment strategy
      # Examples: AWS CodeDeploy, Railway, Heroku, Docker, etc.
      - name: Deploy Application
        id: deploy
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your deployment commands here
          # Example for AWS CodeDeploy:
          # aws deploy create-deployment --application-name p2p-api --deployment-group-name production
          
          # Example for Railway:
          # railway deploy
          
          # Example for Heroku:
          # heroku container:push web --app your-app-name
          # heroku container:release web --app your-app-name
          
          # For now, we'll simulate deployment
          echo "✅ Deployment completed successfully"
          echo "app-url=https://your-production-url.com" >> $GITHUB_OUTPUT

  # ==========================================
  # POST-DEPLOYMENT TESTING
  # ==========================================

  cypress-tests:
    name: 'Cypress API Tests'
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/p2p/prod' && github.event_name == 'push'
    
    strategy:
      fail-fast: false
      matrix:
        test-suite: [
          'auth',
          'users', 
          'items',
          'bookings',
          'categories',
          'integration'
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting 30 seconds for deployment to stabilize..."
          sleep 30

      - name: Run Cypress tests for ${{ matrix.test-suite }}
        run: |
          npm run test:${{ matrix.test-suite }}
        env:
          CYPRESS_baseUrl: ${{ needs.deploy.outputs.app-url }}
          NODE_ENV: test

      - name: Generate test report
        if: always()
        run: |
          # Create a detailed test report
          echo "# Cypress Test Report - ${{ matrix.test-suite }}" > cypress-report-${{ matrix.test-suite }}.md
          echo "**Test Suite:** ${{ matrix.test-suite }}" >> cypress-report-${{ matrix.test-suite }}.md
          echo "**Environment:** Production" >> cypress-report-${{ matrix.test-suite }}.md
          echo "**Timestamp:** $(date)" >> cypress-report-${{ matrix.test-suite }}.md
          echo "**Branch:** ${{ github.ref_name }}" >> cypress-report-${{ matrix.test-suite }}.md
          echo "**Commit:** ${{ github.sha }}" >> cypress-report-${{ matrix.test-suite }}.md
          echo "" >> cypress-report-${{ matrix.test-suite }}.md
          
          if [ -d "cypress/results" ]; then
            echo "## Test Results" >> cypress-report-${{ matrix.test-suite }}.md
            find cypress/results -name "*.json" -exec cat {} \; | jq -r '.tests[] | "- \(.title): \(.state)"' >> cypress-report-${{ matrix.test-suite }}.md 2>/dev/null || echo "- Test results processed" >> cypress-report-${{ matrix.test-suite }}.md
          fi

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.test-suite }}
          path: cypress/screenshots/

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos-${{ matrix.test-suite }}
          path: cypress/videos/

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-report-${{ matrix.test-suite }}
          path: cypress-report-${{ matrix.test-suite }}.md

  # ==========================================
  # NOTIFICATION & REPORTING
  # ==========================================

  notify-results:
    name: 'Send Test Results Notification'
    runs-on: ubuntu-latest
    needs: [cypress-tests]
    if: always() && (github.ref == 'refs/heads/p2p/prod' && github.event_name == 'push')
    
    steps:
      - name: Download all test reports
        uses: actions/download-artifact@v4
        with:
          pattern: cypress-report-*
          path: reports/

      - name: Combine test reports
        run: |
          echo "# 🧪 P2P API - Post-Deployment Test Results" > combined-report.md
          echo "" >> combined-report.md
          echo "**Deployment:** ${{ github.ref_name }} @ ${{ github.sha }}" >> combined-report.md
          echo "**Timestamp:** $(date)" >> combined-report.md
          echo "**Workflow:** ${{ github.run_id }}" >> combined-report.md
          echo "" >> combined-report.md
          
          # Combine all individual reports
          for report in reports/*/cypress-report-*.md; do
            if [ -f "$report" ]; then
              echo "" >> combined-report.md
              cat "$report" >> combined-report.md
              echo "" >> combined-report.md
              echo "---" >> combined-report.md
            fi
          done
          
          # Add deployment status
          echo "" >> combined-report.md
          echo "## 🚀 Deployment Status" >> combined-report.md
          if [ "${{ needs.cypress-tests.result }}" = "success" ]; then
            echo "✅ **All tests passed** - Deployment is healthy" >> combined-report.md
          else
            echo "❌ **Some tests failed** - Please review the deployment" >> combined-report.md
          fi
          
          echo "" >> combined-report.md
          echo "---" >> combined-report.md
          echo "*Generated by GitHub Actions CI/CD Pipeline*" >> combined-report.md

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '🧪 P2P API Test Results - ${{ github.ref_name }}'
          to: ${{ secrets.NOTIFICATION_EMAILS }}
          from: P2P API CI/CD <${{ secrets.EMAIL_USERNAME }}>
          html_body: |
            <h2>🧪 P2P API - Post-Deployment Test Results</h2>
            <p><strong>Deployment:</strong> ${{ github.ref_name }} @ ${{ github.sha }}</p>
            <p><strong>Timestamp:</strong> ${{ github.event.head_commit.timestamp }}</p>
            <p><strong>Workflow:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.run_id }}</a></p>
            
            <h3>📊 Test Summary</h3>
            ${{ needs.cypress-tests.result == 'success' && 
                '<p style="color: green;">✅ <strong>All tests passed</strong> - Deployment is healthy</p>' || 
                '<p style="color: red;">❌ <strong>Some tests failed</strong> - Please review the deployment</p>' }}
            
            <h3>🔗 Links</h3>
            <ul>
              <li><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Full Workflow</a></li>
              <li><a href="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}">View Commit</a></li>
            </ul>
            
            <p><em>Generated by GitHub Actions CI/CD Pipeline</em></p>
          attachments: combined-report.md

      - name: Upload combined report
        uses: actions/upload-artifact@v4
        with:
          name: combined-test-report
          path: combined-report.md

  # ==========================================
  # CLEANUP JOB
  # ==========================================

  cleanup:
    name: 'Cleanup Artifacts'
    runs-on: ubuntu-latest
    needs: [notify-results]
    if: always()
    
    steps:
      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            build-artifacts
            eslint-report
            security-audit-report
          failOnError: false

# ==========================================
# WORKFLOW SUMMARY
# ==========================================

# This workflow provides:
# 1. ✅ ESLint code quality checks with error reporting
# 2. ✅ TypeScript type checking (tsc --noEmit)  
# 3. ✅ Backend build testing (tsc compilation)
# 4. ✅ Security and dependency vulnerability scanning
# 5. ✅ Conditional deployment (only on p2p/prod branch)
# 6. ✅ Comprehensive Cypress API testing post-deployment
# 7. ✅ Email notifications with detailed test reports
# 8. ✅ Artifact management and cleanup
# 9. ✅ Parallel test execution with matrix strategy
# 10. ✅ Production environment protection